<docs>
  <ClassSummary>
    <summary>
      Provides a means of reading a forward-only stream of rows from a MyMySql database. This class cannot be inherited.
    </summary>
    <remarks>
      <para>
        To create a <B>MyMySqlDataReader</B>, you must call the <see cref="MyMySqlCommand.ExecuteReader()"/>
        method of the <see cref="MyMySqlCommand"/> object, rather than directly using a constructor.
      </para>
      <para>
        While the <B>MyMySqlDataReader</B> is in use, the associated <see cref="MyMySqlConnection"/>
        is busy serving the <B>MyMySqlDataReader</B>, and no other operations can be performed
        on the <B>MyMySqlConnection</B> other than closing it. This is the case until the
        <see cref="MyMySqlDataReader.Close"/> method of the <B>MyMySqlDataReader</B> is called.
      </para>
      <para>
        <see cref="MyMySqlDataReader.IsClosed"/> and <see cref="MyMySqlDataReader.RecordsAffected"/>
        are the only properties that you can call after the <B>MyMySqlDataReader</B> is
        closed. Though the <B>RecordsAffected</B> property may be accessed at any time
        while the <B>MyMySqlDataReader</B> exists, always call <B>Close</B> before returning
        the value of <B>RecordsAffected</B> to ensure an accurate return value.
      </para>
      <para>
        For optimal performance, <B>MyMySqlDataReader</B> avoids creating
        unnecessary objects or making unnecessary copies of data. As a result, multiple calls
        to methods such as <see cref="MyMySqlDataReader.GetValue"/> return a reference to the
        same object. Use caution if you are modifying the underlying value of the objects
        returned by methods such as <B>GetValue</B>.
      </para>
    </remarks>

    <example>
      The following example creates a <see cref="MyMySqlConnection"/>,
      a <see cref="MyMySqlCommand"/>, and a <B>MyMySqlDataReader</B>. The example reads through
      the data, writing it out to the console. Finally, the example closes the <B>MyMySqlDataReader</B>, then the
      <B>MyMySqlConnection</B>.
      <code lang="vbnet">
        Public Sub ReadMyData(myConnString As String)
        Dim mySelectQuery As String = "SELECT OrderID, CustomerID FROM Orders"
        Dim myConnection As New MyMySqlConnection(myConnString)
        Dim myCommand As New MyMySqlCommand(mySelectQuery, myConnection)
        myConnection.Open()
        Dim myReader As MyMySqlDataReader
        myReader = myCommand.ExecuteReader()
        ' Always call Read before accessing data.
        While myReader.Read()
        Console.WriteLine((myReader.GetInt32(0) &amp; ", " &amp; myReader.GetString(1)))
        End While
        ' always call Close when done reading.
        myReader.Close()
        ' Close the connection when done with it.
        myConnection.Close()
        End Sub 'ReadMyData
      </code>
      <code lang="C#">
        public void ReadMyData(string myConnString) {
        string mySelectQuery = "SELECT OrderID, CustomerID FROM Orders";
        MyMySqlConnection myConnection = new MyMySqlConnection(myConnString);
        MyMySqlCommand myCommand = new MyMySqlCommand(mySelectQuery,myConnection);
        myConnection.Open();
        MyMySqlDataReader myReader;
        myReader = myCommand.ExecuteReader();
        // Always call Read before accessing data.
        while (myReader.Read()) {
        Console.WriteLine(myReader.GetInt32(0) + ", " + myReader.GetString(1));
        }
        // always call Close when done reading.
        myReader.Close();
        // Close the connection when done with it.
        myConnection.Close();
        }
      </code>
    </example>
  </ClassSummary>

  <GetBytes>
    <remarks>
      <para>
        <B>GetBytes</B> returns the number of available bytes in the field. In most
        cases this is the exact length of the field. However, the number returned may be
        less than the true length of the field if <B>GetBytes</B> has already been used
        to obtain bytes from the field. This may be the case, for example, if the
        <see cref="MyMySqlDataReader"/> is reading a large data structure into a buffer.
        For more information, see the <B>SequentialAccess</B> setting for
        <see cref="MyMySqlCommand.CommandBehavior"/>.
      </para>
      <para>
        If you pass a buffer that is a null reference (<B>Nothing</B> in Visual
        Basic), <B>GetBytes</B> returns the length of the field in bytes.
      </para>
      <para>
        No conversions are performed; therefore the data retrieved must already be a
        byte array.
      </para>
    </remarks>
  </GetBytes>

  <GetTimeSpan>
    <overloads/>
    <summary>
      Gets the value of the specified column as a <see cref="TimeSpan"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Time</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The zero-based column ordinal or column name.</param>
    <returns>The value of the specified column.</returns>
  </GetTimeSpan>

  <GetDateTime>
    <summary>
      Gets the value of the specified column as a <see cref="DateTime"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>DateTime</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
      <note>
        <para>
          MyMySql allows date columns to contain the value '0000-00-00' and datetime
          columns to contain the value '0000-00-00 00:00:00'.  The DateTime structure cannot contain
          or represent these values.  To read a datetime value from a column that might
          contain zero values, use <see cref="GetMyMySqlDateTime(int)"/>.
        </para>
        <para>
          The behavior of reading a zero datetime column using this method is defined by the
          <i>ZeroDateTimeBehavior</i> connection string option.  For more information on this option,
          please refer to <see cref="MyMySqlConnection.ConnectionString"/>.
        </para>
      </note>
    </remarks>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetDateTime>

  <GetDateTimeS>
    <summary>
      Gets the value of the specified column as a <see cref="DateTime"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>DateTime</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
      <note>
        <para>
          MyMySql allows date columns to contain the value '0000-00-00' and datetime
          columns to contain the value '0000-00-00 00:00:00'.  The DateTime structure cannot contain
          or represent these values.  To read a datetime value from a column that might
          contain zero values, use <see cref="GetMyMySqlDateTime(int)"/>.
        </para>
        <para>
          The behavior of reading a zero datetime column using this method is defined by the
          <i>ZeroDateTimeBehavior</i> connection string option.  For more information on this option,
          please refer to <see cref="MyMySqlConnection.ConnectionString"/>.
        </para>
      </note>
    </remarks>
    <param name="column">The column name.</param>
    <returns>The value of the specified column.</returns>
  </GetDateTimeS>

  <GetMyMySqlDateTime>
    <summary>
      Gets the value of the specified column as a <see cref="MyMySql.Data.Types.MyMySqlDateTime"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>DateTime</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The zero-based column ordinal or column name.</param>
    <returns>The value of the specified column.</returns>
  </GetMyMySqlDateTime>

  <GetString>
    <summary>
      Gets the value of the specified column as a <see cref="String"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>String</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetString>

  <GetStringS>
    <summary>
      Gets the value of the specified column as a <see cref="String"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>String</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The column name.</param>
    <returns>The value of the specified column.</returns>
  </GetStringS>

  <GetDecimal>
    <summary>
      Gets the value of the specified column as a <see cref="Decimal"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Decimal</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="i">The zero-based column ordinal</param>
    <returns>The value of the specified column.</returns>
  </GetDecimal>

  <GetDecimalS>
    <summary>
      Gets the value of the specified column as a <see cref="Decimal"/> object.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Decimal</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The column name</param>
    <returns>The value of the specified column.</returns>
  </GetDecimalS>

  <GetDouble>
    <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Double</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetDouble>

  <GetDoubleS>
    <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Double</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The column name</param>
    <returns>The value of the specified column.</returns>
  </GetDoubleS>
  
  <GetFloat>
    <summary>
      Gets the value of the specified column as a single-precision floating point number.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Float</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetFloat>

  <GetFloatS>
    <summary>
      Gets the value of the specified column as a single-precision floating point number.
    </summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Float</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The column name</param>
    <returns>The value of the specified column.</returns>
  </GetFloatS>

  <GetGiud>
    <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetGiud>

  <GetGiudS>
    <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
    <param name="column">The column name</param>
    <returns>The value of the specified column.</returns>
  </GetGiudS>

  <GetInt16>
    <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>16 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetInt16>

  <GetInt16S>
    <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
    <remarks>
      <para>
        No conversions are performed; threfore, the data retrieved must already be a <b>16 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The column name</param>
    <returns>The value of the specified column.</returns>
  </GetInt16S>

  <GetInt32>
    <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>32 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetInt32>

  <GetInt32S>
    <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>32 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The column name.</param>
    <returns>The value of the specified column.</returns>
  </GetInt32S>

  <GetInt64>
    <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>64 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="i">The zero-based column ordinal.</param>
    <returns>The value of the specified column.</returns>
  </GetInt64>

  <GetInt64S>
    <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>64 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The column name.</param>
    <returns>The value of the specified column.</returns>
  </GetInt64S>

  <GetUInt16>
    <summary>Gets the value of the specified column as a 16-bit unsigned integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>16 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The zero-based column ordinal or column name.</param>
    <returns>The value of the specified column.</returns>
  </GetUInt16>

  <GetUInt32>
    <summary>Gets the value of the specified column as a 32-bit unsigned integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>32 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The zero-based column ordinal or column name.</param>
    <returns>The value of the specified column.</returns>
  </GetUInt32>

  <GetUInt64>
    <summary>Gets the value of the specified column as a 64-bit unsigned integer.</summary>
    <remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>64 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks>
    <param name="column">The zero-based column ordinal or column name.</param>
    <returns>The value of the specified column.</returns>
  </GetUInt64>

</docs>